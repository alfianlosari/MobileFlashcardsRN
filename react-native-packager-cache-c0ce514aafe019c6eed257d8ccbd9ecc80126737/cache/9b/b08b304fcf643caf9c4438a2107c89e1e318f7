Object.defineProperty(exports, "__esModule", {
    value: true
});

var _class, _temp2;

var _react = require('react');

var _react2 = babelHelpers.interopRequireDefault(_react);

var _reactNative = require('react-native');

var _api = require('../utils/api');

var _actions = require('../actions');

var _reactRedux = require('react-redux');

var _TextButton = require('./TextButton');

var _TextButton2 = babelHelpers.interopRequireDefault(_TextButton);

var _colors = require('../utils/colors');

var _reactNavigation = require('react-navigation');

var uuidv4 = require('uuid/v4');

var AddDeck = (_temp2 = _class = function (_Component) {
    babelHelpers.inherits(AddDeck, _Component);

    function AddDeck() {
        var _ref;

        var _temp, _this, _ret;

        babelHelpers.classCallCheck(this, AddDeck);

        for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
        }

        return _ret = (_temp = (_this = babelHelpers.possibleConstructorReturn(this, (_ref = AddDeck.__proto__ || Object.getPrototypeOf(AddDeck)).call.apply(_ref, [this].concat(args))), _this), _this.state = {
            title: ''
        }, _this.toDetail = function (deckId, title) {
            _this.props.navigation.navigate('DeckDetail', { deckId: deckId, title: title });
        }, _this.submitDeck = function () {
            var title = _this.state.title;
            var dispatch = _this.props.dispatch;

            if (title.length > 0) {
                _this.setState(function () {
                    return {
                        title: ''
                    };
                });
                var id = uuidv4();
                dispatch((0, _actions.addDeck)(babelHelpers.defineProperty({}, id, {
                    id: id,
                    title: title,
                    questions: []
                })));

                (0, _api.saveDeckTitle)(id, title);
                _this.toDetail(id, title);
            }
        }, _temp), babelHelpers.possibleConstructorReturn(_this, _ret);
    }

    babelHelpers.createClass(AddDeck, [{
        key: 'render',
        value: function render() {
            var _this2 = this;

            return _react2.default.createElement(
                _reactNative.KeyboardAvoidingView,
                { style: styles.container },
                _react2.default.createElement(
                    _reactNative.Text,
                    { style: styles.question },
                    AddDeck.CREATE_DECK_TEXT
                ),
                _react2.default.createElement(_reactNative.TextInput, {
                    style: styles.textField,
                    onChangeText: function onChangeText(title) {
                        return _this2.setState({ title: title });
                    },
                    value: this.state.title,
                    placeholder: 'Deck Title'
                }),
                _react2.default.createElement(
                    _TextButton2.default,
                    { style: { margin: 20 }, buttonColor: _colors.black, onPress: this.submitDeck },
                    'Submit'
                )
            );
        }
    }]);
    return AddDeck;
}(_react.Component), _class.CREATE_DECK_TEXT = 'What is the title of your new deck?', _class.navigationOptions = function (_ref2) {
    var navigation = _ref2.navigation;

    return {
        title: 'Add Deck'
    };
}, _temp2);


var styles = _reactNative.StyleSheet.create({
    container: {
        flex: 1,
        backgroundColor: '#fff',
        alignItems: 'center',
        justifyContent: 'flex-start'
    },
    question: {
        marginLeft: 10,
        marginRight: 10,
        marginTop: 40,
        marginBottom: 20,
        fontSize: 28,
        textAlign: 'center'
    },
    textField: {
        height: 40, width: '80%', borderColor: 'gray', borderWidth: 1,
        borderRadius: 5,
        paddingLeft: 8,
        paddingRight: 8,
        marginBottom: 20,
        borderColor: _colors.black
    }

});

exports.default = (0, _reactRedux.connect)()(AddDeck);