Object.defineProperty(exports, "__esModule", {
    value: true
});

var _class,
    _temp2,
    _jsxFileName = '/Users/alfianlosari/Desktop/RN/MobileFlashcards/components/Quiz.js';

var _react = require('react');

var _react2 = babelHelpers.interopRequireDefault(_react);

var _reactNative = require('react-native');

var _reactRedux = require('react-redux');

var _reactNavigation = require('react-navigation');

var _colors = require('../utils/colors');

var _TextButton = require('./TextButton');

var _TextButton2 = babelHelpers.interopRequireDefault(_TextButton);

var Quiz = (_temp2 = _class = function (_Component) {
    babelHelpers.inherits(Quiz, _Component);

    function Quiz() {
        var _ref;

        var _temp, _this, _ret;

        babelHelpers.classCallCheck(this, Quiz);

        for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
        }

        return _ret = (_temp = (_this = babelHelpers.possibleConstructorReturn(this, (_ref = Quiz.__proto__ || Object.getPrototypeOf(Quiz)).call.apply(_ref, [this].concat(args))), _this), _this.state = {
            currentQuestionIndex: 0,
            correct: 0,
            incorrect: 0,
            isQuestion: true
        }, _this.submitCorrect = function () {
            _this.setState(function (state) {
                var _babelHelpers$extends;

                var count = state['currentQuestionIndex'] + 1;
                var correctCount = state['correct'] + 1;
                return babelHelpers.extends({}, state, (_babelHelpers$extends = {}, babelHelpers.defineProperty(_babelHelpers$extends, 'currentQuestionIndex', count), babelHelpers.defineProperty(_babelHelpers$extends, 'correct', correctCount), babelHelpers.defineProperty(_babelHelpers$extends, 'isQuestion', true), _babelHelpers$extends));
            });
        }, _this.submitIncorrect = function () {
            _this.setState(function (state) {
                var _babelHelpers$extends2;

                var count = state['currentQuestionIndex'] + 1;
                var incorrectCount = state['incorrect'] + 1;
                return babelHelpers.extends({}, state, (_babelHelpers$extends2 = {}, babelHelpers.defineProperty(_babelHelpers$extends2, 'currentQuestionIndex', count), babelHelpers.defineProperty(_babelHelpers$extends2, 'incorrect', incorrectCount), babelHelpers.defineProperty(_babelHelpers$extends2, 'isQuestion', true), _babelHelpers$extends2));
            });
        }, _this.toggleQuestion = function () {
            _this.setState(function (state) {
                var isQuestion = !state['isQuestion'];
                return babelHelpers.extends({}, state, babelHelpers.defineProperty({}, 'isQuestion', isQuestion));
            });
        }, _this.resetQuiz = function () {
            _this.setState({
                currentQuestionIndex: 0,
                correct: 0,
                incorrect: 0,
                isQuestion: true
            });
        }, _this.toDeck = function () {
            _this.props.navigation.goBack();
        }, _temp), babelHelpers.possibleConstructorReturn(_this, _ret);
    }

    babelHelpers.createClass(Quiz, [{
        key: 'render',
        value: function render() {
            var deck = this.props.deck;
            var currentQuestionIndex = this.state.currentQuestionIndex;

            if (deck === null) {
                return _react2.default.createElement(
                    _reactNative.ScrollView,
                    { contentContainerStyle: styles.containerCenter, style: styles.container, __source: {
                            fileName: _jsxFileName,
                            lineNumber: 77
                        }
                    },
                    _react2.default.createElement(
                        _reactNative.Text,
                        { style: styles.textInfo, __source: {
                                fileName: _jsxFileName,
                                lineNumber: 78
                            }
                        },
                        'Fetching Cards...'
                    )
                );
            }

            if (deck.questions.length === 0) {
                return _react2.default.createElement(
                    _reactNative.ScrollView,
                    { contentContainerStyle: styles.containerCenter, style: styles.container, __source: {
                            fileName: _jsxFileName,
                            lineNumber: 85
                        }
                    },
                    _react2.default.createElement(
                        _reactNative.Text,
                        { style: [styles.textInfo, { marginBottom: 10 }], __source: {
                                fileName: _jsxFileName,
                                lineNumber: 86
                            }
                        },
                        'No Cards. Please Add Card to Deck'
                    ),
                    _react2.default.createElement(
                        _TextButton2.default,
                        { style: { margin: 20 }, buttonColor: _colors.white, textColor: _colors.black, viewStyle: { marginBottom: 10, borderWidth: 1 }, onPress: this.toDeck, __source: {
                                fileName: _jsxFileName,
                                lineNumber: 87
                            }
                        },
                        'Back To Deck'
                    )
                );
            }

            if (currentQuestionIndex >= deck.questions.length) {
                return _react2.default.createElement(
                    _reactNative.ScrollView,
                    { contentContainerStyle: styles.containerCenter, __source: {
                            fileName: _jsxFileName,
                            lineNumber: 97
                        }
                    },
                    _react2.default.createElement(
                        _reactNative.Text,
                        { style: [styles.textInfo, { marginBottom: 10 }], __source: {
                                fileName: _jsxFileName,
                                lineNumber: 98
                            }
                        },
                        'Quiz Finished'
                    ),
                    _react2.default.createElement(
                        _reactNative.Text,
                        { style: [styles.textInfo, { marginBottom: 20 }], __source: {
                                fileName: _jsxFileName,
                                lineNumber: 99
                            }
                        },
                        this.state.correct / deck.questions.length * 100,
                        '% Correct'
                    ),
                    _react2.default.createElement(
                        _TextButton2.default,
                        { style: { margin: 20 }, buttonColor: _colors.white, textColor: _colors.black, viewStyle: { marginBottom: 10, borderWidth: 1 }, onPress: this.toDeck, __source: {
                                fileName: _jsxFileName,
                                lineNumber: 100
                            }
                        },
                        'Back To Deck'
                    ),
                    _react2.default.createElement(
                        _TextButton2.default,
                        { style: { margin: 20 }, buttonColor: _colors.black, textColor: _colors.white, onPress: this.resetQuiz, __source: {
                                fileName: _jsxFileName,
                                lineNumber: 103
                            }
                        },
                        'Restart Quiz'
                    )
                );
            }

            return _react2.default.createElement(
                _reactNative.ScrollView,
                { contentContainerStyle: styles.containerStart, __source: {
                        fileName: _jsxFileName,
                        lineNumber: 111
                    }
                },
                _react2.default.createElement(
                    _reactNative.Text,
                    { style: { color: '#4a4a4a', fontSize: 20, alignSelf: 'flex-start', margin: 16 }, __source: {
                            fileName: _jsxFileName,
                            lineNumber: 112
                        }
                    },
                    currentQuestionIndex + 1 + '/' + deck.questions.length
                ),
                this.state.isQuestion ? _react2.default.createElement(
                    _reactNative.Text,
                    { style: styles.textMain, __source: {
                            fileName: _jsxFileName,
                            lineNumber: 115
                        }
                    },
                    deck.questions[currentQuestionIndex].question
                ) : _react2.default.createElement(
                    _reactNative.Text,
                    { style: styles.textMain, __source: {
                            fileName: _jsxFileName,
                            lineNumber: 116
                        }
                    },
                    deck.questions[currentQuestionIndex].answer
                ),
                _react2.default.createElement(
                    _reactNative.TouchableOpacity,
                    { onPress: this.toggleQuestion, __source: {
                            fileName: _jsxFileName,
                            lineNumber: 118
                        }
                    },
                    this.state.isQuestion ? _react2.default.createElement(
                        _reactNative.Text,
                        { style: styles.textFlip, __source: {
                                fileName: _jsxFileName,
                                lineNumber: 121
                            }
                        },
                        'Show Answer'
                    ) : _react2.default.createElement(
                        _reactNative.Text,
                        { style: styles.textFlip, __source: {
                                fileName: _jsxFileName,
                                lineNumber: 122
                            }
                        },
                        'Question'
                    )
                ),
                _react2.default.createElement(
                    _TextButton2.default,
                    { style: { margin: 20 }, buttonColor: _colors.green, textColor: _colors.white, viewStyle: { marginBottom: 10 }, onPress: this.submitCorrect, __source: {
                            fileName: _jsxFileName,
                            lineNumber: 127
                        }
                    },
                    'Correct'
                ),
                _react2.default.createElement(
                    _TextButton2.default,
                    { style: { margin: 20 }, buttonColor: _colors.red, textColor: _colors.white, onPress: this.submitIncorrect, __source: {
                            fileName: _jsxFileName,
                            lineNumber: 130
                        }
                    },
                    'Incorrect'
                )
            );
        }
    }]);
    return Quiz;
}(_react.Component), _class.navigationOptions = function (_ref2) {
    var navigation = _ref2.navigation;

    return {
        title: "Quiz"
    };
}, _temp2);


var styles = _reactNative.StyleSheet.create({
    container: {
        backgroundColor: '#fff'
    }, containerStart: {
        flex: 1,
        backgroundColor: '#fff',
        alignItems: 'center',
        justifyContent: 'flex-start'
    },
    textInfo: {
        fontSize: 30,
        marginLeft: 16,
        marginRight: 16,
        textAlign: 'center'
    },
    textMain: {
        fontSize: 36,
        marginTop: 80,
        marginBottom: 10,
        marginLeft: 16,
        marginRight: 16,
        textAlign: 'center'
    },
    textFlip: {
        color: _colors.red,
        fontSize: 18,
        marginBottom: 80
    },
    containerCenter: {
        flex: 1,
        backgroundColor: '#fff',
        alignItems: 'center',
        justifyContent: 'center'
    }
});

function mapStateToProps(decks, _ref3) {
    var navigation = _ref3.navigation;
    var deckId = navigation.state.params.deckId;

    return {
        deck: decks[deckId]
    };
}

exports.default = (0, _reactRedux.connect)(mapStateToProps)(Quiz);