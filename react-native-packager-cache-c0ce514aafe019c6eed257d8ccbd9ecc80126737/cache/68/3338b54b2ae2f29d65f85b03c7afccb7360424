Object.defineProperty(exports, "__esModule", {
    value: true
});

var _class, _temp2;

var _react = require('react');

var _react2 = babelHelpers.interopRequireDefault(_react);

var _reactNative = require('react-native');

var _api = require('../utils/api');

var _actions = require('../actions');

var _reactRedux = require('react-redux');

var ListDeck = (_temp2 = _class = function (_Component) {
    babelHelpers.inherits(ListDeck, _Component);

    function ListDeck() {
        var _ref;

        var _temp, _this, _ret;

        babelHelpers.classCallCheck(this, ListDeck);

        for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
        }

        return _ret = (_temp = (_this = babelHelpers.possibleConstructorReturn(this, (_ref = ListDeck.__proto__ || Object.getPrototypeOf(ListDeck)).call.apply(_ref, [this].concat(args))), _this), _this.renderSeparator = function () {
            return _react2.default.createElement(_reactNative.View, {
                style: {
                    height: 1,
                    width: "100%",
                    backgroundColor: "#CED0CE"
                }
            });
        }, _this._keyExtractor = function (item, index) {
            return item.id;
        }, _this._renderItem = function (_ref2) {
            var item = _ref2.item;
            return _react2.default.createElement(
                _reactNative.TouchableOpacity,
                { style: styles.deckItem, onPress: function onPress() {
                        return _this.props.navigation.navigate('DeckDetail', { deckId: item.id, title: item.title });
                    } },
                _react2.default.createElement(
                    _reactNative.View,
                    { style: styles.textContainer },
                    _react2.default.createElement(
                        _reactNative.Text,
                        { style: { fontSize: 20 } },
                        item.title
                    ),
                    _react2.default.createElement(
                        _reactNative.Text,
                        { style: { fontSize: 14, color: '#c0c0c0' } },
                        item.questions.length,
                        ' Cards'
                    )
                )
            );
        }, _temp), babelHelpers.possibleConstructorReturn(_this, _ret);
    }

    babelHelpers.createClass(ListDeck, [{
        key: 'componentDidMount',
        value: function componentDidMount() {
            var dispatch = this.props.dispatch;

            (0, _api.getDecks)().then(function (decks) {
                return dispatch((0, _actions.receiveDecks)(decks));
            });
        }
    }, {
        key: 'render',
        value: function render() {
            var _props = this.props,
                decks = _props.decks,
                navigation = _props.navigation;

            return _react2.default.createElement(_reactNative.FlatList, {
                data: decks,
                renderItem: this._renderItem,
                keyExtractor: this._keyExtractor,
                ItemSeparatorComponent: this.renderSeparator
            });
        }
    }]);
    return ListDeck;
}(_react.Component), _class.navigationOptions = function (_ref3) {
    var navigation = _ref3.navigation;

    return {
        title: 'My Decks'
    };
}, _temp2);


var styles = _reactNative.StyleSheet.create({
    container: {
        flex: 1,
        backgroundColor: '#fff',
        alignItems: 'center',
        justifyContent: 'center'
    },
    deckItem: {
        padding: 40,
        backgroundColor: '#fff'
    },
    textContainer: {
        alignItems: 'center',
        justifyContent: 'center'
    }
});

function mapStateToProps(deck) {
    var decks = Object.keys(deck).map(function (key) {
        return deck[key];
    });
    return {
        decks: decks
    };
}

exports.default = (0, _reactRedux.connect)(mapStateToProps)(ListDeck);