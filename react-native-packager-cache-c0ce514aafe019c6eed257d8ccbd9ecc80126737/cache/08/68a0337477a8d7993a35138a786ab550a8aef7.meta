["4b07fb4609f802328a40f67122152d6ea3664b3a","873913abafdddbcd5ddcadc9c0b447b100abed5a",["react","react-native","react-redux","react-navigation","../utils/colors","./TextButton","../utils/helpers"],[110,207,251,299,343,390,500],{"version":3,"sources":["/Users/alfianlosari/Desktop/RN/MobileFlashcards/components/Quiz.js"],"names":["Quiz","state","currentQuestionIndex","correct","incorrect","isQuestion","submitCorrect","setState","count","correctCount","submitIncorrect","incorrectCount","toggleQuestion","resetQuiz","toDeck","props","navigation","goBack","quizCompleted","deck","styles","containerCenter","container","textInfo","questions","length","marginBottom","margin","borderWidth","containerStart","color","fontSize","alignSelf","textMain","question","answer","textFlip","navigationOptions","title","create","backgroundColor","flex","alignItems","justifyContent","marginLeft","marginRight","textAlign","marginTop","mapStateToProps","decks","deckId","params"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport { View, ScrollView, Text, StyleSheet, TouchableOpacity } from 'react-native';\nimport { connect } from 'react-redux';\nimport { NavigationActions } from 'react-navigation'; \nimport { black, white, red, green } from '../utils/colors';\nimport TextButton from './TextButton'; \nimport { setLocalNotification, clearLocalNotification} from '../utils/helpers';\n\nclass Quiz extends Component {\n\n    static navigationOptions = ({ navigation }) => {\n        return {\n            title: \"Quiz\"\n        }\n    }\n\n    state = {\n        currentQuestionIndex: 0,\n        correct: 0,\n        incorrect: 0,\n        isQuestion: true,\n    }\n\n    submitCorrect = () => {\n        this.setState((state) => {\n            const count = state['currentQuestionIndex'] + 1\n            const correctCount = state['correct'] + 1\n            return {\n\t\t\t\t...state,\n                ['currentQuestionIndex']: count,\n                ['correct']: correctCount,\n                isQuestion: true\n\t\t\t}\n        })\n    }\n\n    submitIncorrect = () => {\n        this.setState((state) => {\n            const count = state['currentQuestionIndex'] + 1\n            const incorrectCount = state['incorrect'] + 1\n            return {\n\t\t\t\t...state,\n                ['currentQuestionIndex']: count,\n                ['incorrect']: incorrectCount,\n                isQuestion: true\n\t\t\t}\n        })\n    }\n\n    toggleQuestion = () => {\n        this.setState((state) => {\n            const isQuestion = !state['isQuestion']\n            return {\n                ...state,\n                ['isQuestion']: isQuestion\n            }\n        })\n    }\n\n    resetQuiz = () => {\n        this.setState({\n            currentQuestionIndex: 0,\n            correct: 0,\n            incorrect: 0,\n            isQuestion: true,\n        });\n    }\n\n    toDeck = () => {\n        this.props.navigation.goBack();\n    }\n    \n    quizCompleted = () => {\n        clearLocalNotification();\n        setLocalNotification();\n    }\n\n    render() {\n        const { deck } = this.props;\n        const { currentQuestionIndex } = this.state;\n        if (deck === null) {\n            return (\n                <ScrollView contentContainerStyle={styles.containerCenter} style={styles.container}>\n                    <Text style={styles.textInfo}>Fetching Cards...</Text>\n                </ScrollView>\n            )\n        }\n\n        if (deck.questions.length === 0) {\n            return (\n                <ScrollView contentContainerStyle={styles.containerCenter} style={styles.container}>\n                    <Text style={[styles.textInfo, {marginBottom: 10}]}>No Cards. Please Add Card to Deck</Text>\n                    <TextButton style={{margin: 20}} buttonColor={white} textColor={black} viewStyle={{marginBottom: 10, borderWidth: 1}} onPress={this.toDeck}>\n                        Back To Deck\n                    </TextButton>\n                </ScrollView>\n            )\n        }\n\n\n        if (currentQuestionIndex >= deck.questions.length) {\n            this.quizCompleted();\n            return (\n                <ScrollView contentContainerStyle={styles.containerCenter}>\n                    <Text style={[styles.textInfo, {marginBottom: 10}]}>Quiz Finished</Text>\n                    <Text style={[styles.textInfo, {marginBottom: 20}]}>{(this.state.correct / deck.questions.length) * 100}% Correct</Text>\n                    <TextButton style={{margin: 20}} buttonColor={white} textColor={black} viewStyle={{marginBottom: 10, borderWidth: 1}} onPress={this.toDeck}>\n                        Back To Deck\n                    </TextButton>\n                    <TextButton style={{margin: 20}} buttonColor={black} textColor={white} onPress={this.resetQuiz}>\n                        Restart Quiz\n                    </TextButton>\n                </ScrollView>\n            )\n        }\n\n        return (\n            <ScrollView contentContainerStyle={styles.containerStart}>\n                <Text style={{color: '#4a4a4a', fontSize: 20, alignSelf: 'flex-start', margin: 16}}>{`${currentQuestionIndex + 1}/${deck.questions.length}`}</Text>\n                {\n                    this.state.isQuestion\n                    ?  <Text style={styles.textMain}>{deck.questions[currentQuestionIndex].question}</Text>\n                    :  <Text style={styles.textMain}>{deck.questions[currentQuestionIndex].answer}</Text>\n                }\n                <TouchableOpacity onPress={this.toggleQuestion}>\n                    {\n                        this.state.isQuestion\n                        ?  <Text style={styles.textFlip}>Show Answer</Text>\n                        :  <Text style={styles.textFlip}>Question</Text>\n                    }\n\n                </TouchableOpacity>\n\n                <TextButton style={{margin: 20}} buttonColor={green} textColor={white} viewStyle={{marginBottom: 10}} onPress={this.submitCorrect}>\n                    Correct\n                </TextButton>\n                <TextButton style={{margin: 20}} buttonColor={red} textColor={white} onPress={this.submitIncorrect}>\n                    Incorrect\n                </TextButton> \n            </ScrollView>       \n        )\n    }\n}\n\nconst styles = StyleSheet.create({\n    container: {\n        backgroundColor: '#fff'\n    },containerStart: {\n      flex: 1,\n      backgroundColor: '#fff',\n      alignItems: 'center',\n      justifyContent: 'flex-start',\n    },\n    textInfo: {\n        fontSize: 30,\n        marginLeft: 16,\n        marginRight: 16,\n        textAlign: 'center'\n    },\n    textMain: {\n        fontSize: 36,\n        marginTop: 80,\n        marginBottom: 10,\n        marginLeft: 16,\n        marginRight: 16,\n        textAlign: 'center'\n    },\n    textFlip: {\n        color: red,\n        fontSize: 18,\n        marginBottom: 80\n    },\n    containerCenter: {\n        flex: 1,\n        backgroundColor: '#fff',\n        alignItems: 'center',\n        justifyContent: 'center',\n    }\n  });\n\nfunction mapStateToProps(decks, { navigation }) {\n    const { deckId } = navigation.state.params;    \n    return {\n        deck: decks[deckId]\n    }\n}\n\nexport default connect(mapStateToProps)(Quiz)"]}]